@model Angora.Web.Models.EventEditViewModel


<h2>Edit Event</h2>
<hr />
@using (Html.BeginForm("EditEvent", "Event"))
{
    <div class="form-horizontal">
        @Html.HiddenFor(m => m.Event.Id)
        @Html.HiddenFor(m => m.Event.EventTime.Id)
        @Html.HiddenFor(m => m.Event.Scheduler.Id)
        @Html.HiddenFor(m => m.Event.Location.Id)
        @Html.HiddenFor(m => m.Event.CreationTime)

        <div class="form-group">
            @Html.LabelFor(m => m.Event.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Event.Name, new { @class = "form-control", required = "required" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Event.Description, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.Event.Description, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Location">
                <span class="label label-info" onclick="toggleShow(document.getElementById('coor-help'))" style="margin-right: 10px">...</span>
                Location
            </label>
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Event.Location.NameOrAddress, new { @class = "form-control", id = "geocomplete", required = "required" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-offset-2 col-md-10">
                <div class="details help-box well well-sm" id="coor-help" style="display: none">
                    <p>To benefit from our location-based services, select an autocomplete entry after beginning to type the address.</p>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="map_canvas"></div>
            </div>
        </div>

        @if (Model.Event.EventTime != null && Model.Event.EventTime.StartTime != null || (Model.Event.Scheduler != null && Model.Event.Scheduler.IsTimeSet))
        {

            <div class="form-group">
                <label class="control-label col-md-2">Start Date and Time</label>
                <div class="col-md-10">
                    @Html.TextBoxFor(m => m.Event.EventTime.StartTime, "{0:yyyy-MM-ddTHH:mm}",
                    new
                    {
                        @class = "form-control",
                        type = "datetime-local",
                        min = DateTime.Now.ToString("yyyy-MM-ddTHH:mm"),
                        max = DateTime.Now.AddYears(5).ToString("yyyy-MM-ddTHH:mm"),
                        required = "required"
                    })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Duration</label>
                <label class="control-label col-md-1">Hours:</label>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.DurationHours, new { @class = "form-control", type = "number", min = "0", max = "24", step = "1", required = "required", style = "display:inline" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-1 col-md-offset-2">Minutes:</label>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.DurationMinutes, new { @class = "form-control", type = "number", min = "0", max = "59", step = "5", required = "required", style = "display:inline" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                <div class="col-md-10 col-md-offset-2">
                    This event doesn't have a time set. You can try <a href="@Url.Action("Index","EventScheduler")">finding a time</a>.
                </div>
            </div>
        }

        <div id="latlong">
            @Html.HiddenFor(m => m.Event.Location.Latitude, new { data_geo = "lat" })
            @Html.HiddenFor(m => m.Event.Location.Longitude, new { data_geo = "lng" })
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-2">
                <button type="submit" class="btn btn-success width-100">Save</button>
            </div>
            <div class=" col-md-2">
                <a href="@Url.Action("Index", "EventFeed")" class="btn btn-info width-100">Cancel</a>
            </div>
        </div>
    </div>
}

<script>
    function toggleShow(element) {
        if ($(element).is(":hidden")) {
            $(element).slideDown();
        }
        else {
            $(element).slideUp();
        }
    }

    $(function () {
        var options = {
            map: ".map_canvas",
            details: "#latlong",
            detailsAttribute: "data-geo",
            location: '@Model.Event.Location.NameOrAddress',
            markerOptions: {
                draggable: false,
            },
            types: ['geocode', 'establishment'],
        };

        $("#geocomplete").geocomplete(options)
          .bind("geocode:result", function (event, result) {
              console.log("Result: " + result.formatted_address);
          })
          .bind("geocode:error", function (event, status) {
              console.log("ERROR: " + status);
          })
          .bind("geocode:multiple", function (event, results) {
              console.log("Multiple: " + results.length + " results found");
          });
    });
</script>
